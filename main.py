import wikipedia
import datetime
import time
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.errors import FloodWait
import python_weather
import requests
from requests import HTTPError
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
answer_locale = "ru"                                                    # –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–æ–≤ Wikipedia –∏ Forecast
bot_version = "1.1"                                                     # –í–µ—Ä—Å–∏—è –±–æ—Ç–∞
api_id = 00000000                                                       # –ö–ª—é—á Telegram API
api_hash = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"                           # –•—ç—à Telegram API
app = Client("my_account", api_id=api_id, api_hash=api_hash)

wikipedia.set_lang(answer_locale)

@app.on_message(filters.command("catgif", "m."))
async def send_random_cat_gif(client, message):
    url = "https://lolhie3.github.io/catgifdb/catgifdb.gfyset"
    response = requests.get(url)
    if response.status_code == 200:
        gifs = response.text.split('\n')
        random_gif = random.choice(gifs)
        await message.reply_animation(random_gif)
    else:
        await message.reply('‚ùå –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.')

@app.on_message(filters.command("typewriter", "m.") & filters.me)
async def animtext_command(_, message):
    input_text = message.text.split("m.typewriter ", maxsplit=1)[1]
    temp_text = input_text
    edited_text = ""
    typing_symbol = "_"

    while edited_text != input_text:
        try:
            await message.edit(edited_text + typing_symbol)
            time.sleep(0.1)
            edited_text = edited_text + temp_text[0]
            temp_text = temp_text[1:]
            await message.edit(edited_text)
            time.sleep(0.1)
        except FloodWait:
            print("Flood overflow! Wait...")

autoscr = filters.chat([])


@app.on_message(autoscr)
def auto_read(_, message: Message):
    current_time = datetime.datetime.now().strftime("%H:%M:%S")
    app.read_chat_history(message.chat.id)
    print(f"[{current_time}] –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {message.chat.id}")
    message.continue_propagation()


@app.on_message(filters.command("autoscroll", "m.") & filters.me)
def add_keep(_, message: Message):
    if message.chat.id in autoscr:
        autoscr.remove(message.chat.id)
        message.edit("‚úÖ **–ê–≤—Ç–æ—á—Ç–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ.**")
    else:
        autoscr.add(message.chat.id)
        message.edit("‚úÖ **–ê–≤—Ç–æ—á—Ç–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ.**")

@app.on_message(filters.command("eval", "m."))
def eval_command(client, message):
    command = message.text.split(" ", 1)[1]
    if command.startswith(("exit", "dir", "import", "def", "message", "delete", "remove", "erase", "os")):
        message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ/–∫–æ–¥!")
    else:
        try:
            result = eval(command)
            message.reply(f"{command} = {result}")
        except Exception as e:
            message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@app.on_message(filters.command("wiki", "m."))
def search_command(client, message):
    query = message.text.split(' ', 1)[1]
    page_py = wikipedia.page(title=query)
    response = "**–ù–∞–π–¥–µ–Ω–æ (Wikipedia):**\n\n" + page_py.content[:1024]
    message.reply(response)

@app.on_message(filters.command("forecast", "m."))
async def forecast_command(client, message):
    query = message.text.split(' ', 1)[1]
    current_time = datetime.datetime.now().strftime("%H:%M:%S")
    if query:
        async with python_weather.Client(unit=python_weather.METRIC) as client:
            weather = await client.get(query, locale=answer_locale)
            await message.reply(f"–ü–æ–≥–æ–¥–Ω–∞—è —Å–≤–æ–¥–∫–∞ –¥–ª—è **{query}** –Ω–∞ –º–æ–º–µ–Ω—Ç **{current_time} (UTC+4)** \n\nüå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather.current.temperature}¬∞C\nü•∂Ô∏è –û—â—É—â–∞–µ—Ç—Å—è: {weather.current.feels_like}¬∞C\nüåß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather.current.humidity}%\nüí® –í–µ—Ç–µ—Ä: {weather.current.wind_speed} –∫–º/—á\nüëÄ –í–∏–¥–∏–º–æ—Å—Ç—å: {weather.current.visibility} –∫–º")
            for forecast in weather.forecasts:
                print(forecast)
                for hourly in forecast.hourly:
                    print(f' --> {hourly!r}')
    else:
        message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: m.forecast <–≥–æ—Ä–æ–¥>")

@app.on_message(filters.command("help", "m."))
def help_command(client, message):
    start_time = time.time()
    message.delete()
    end_time = time.time()
    ping_time = round((end_time - start_time) * 1000, 1)
    message.reply(f"ü§ñ **MimeBot –≤–µ—Ä—Å–∏–∏ {bot_version}**\n\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö:\n`m.wiki <–Ω–∞–∑–≤–∞–Ω–∏–µ>` - –ø–æ–∏—Å–∫ —Å—Ç–∞—Ç—å–∏ –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏\n`m.eval <–≤—ã—Ä–∞–∂–µ–Ω–∏–µ>` - –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞\n`m.forecast <–≥–æ—Ä–æ–¥>` - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É\n`m.catgif` - –≥–∏—Ñ–∫–∞ —Å –∫–æ—Ç–∏–∫–æ–º (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤)\n\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —é–∑–µ—Ä–∞:\n`m.typewriter <—Ç–µ–∫—Å—Ç>` - –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç\n`m.autoscroll` - –≤–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ—á—Ç–µ–Ω–∏–µ —á–∞—Ç–æ–≤ (—Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ)\n\n**–ü–∏–Ω–≥: {ping_time} ms**")

app.run()
